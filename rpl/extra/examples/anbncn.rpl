-- Jamie A. Jennings

-- CSG: Matches a{n}b{n}c{n} which is NOT a context-free language!

grammar 
   A = { "a" A? "b" }
   B = { "b" B? "c" }
in
   S = { >{A "c"} "a"+ B $ } / ""
end

-- How it works:
--
-- First clause: >{A "c"}
--   As long as the input is not the empty string, the input string must
--   start with an equal number of a's and b's, followed by a c.  This
--   condition is checked with a lookahead (the '>' operator), meaning that
--   no input is consumed.
--
-- Second clause: "a"+
--   If the first clause passes, the grammar next consumes all of the a's.
--
-- Third clause: B
--   At this point we are at the start of the b's, and the grammar consumes
--   each b while ensuring it has a corresponding c.  In other words, B
--   succeeds if there are an equal number of b's and c's.
--
-- Last clause: $
--   The '$' operator matches only at the end of the input, thus ensuring
--   that there are no extra c's nor any other extra symbols.
--
-- The sequence of clauses above represent the first alternative for S.  If
-- that fails, then S will alternatively accept the empty string,
-- representing the special case where n = 0.



-- test S accepts "", "abc", "aabbcc", "aaabbbccc", "aaaabbbbcccc"

-- test S rejects "a", "b", "c"
-- test S rejects "ab", "bc", "ca", "ba", "cb", "ac"
-- test S rejects "aabb", "aabbc", "aaabbbcc"
-- test S rejects "aacc", "aabcc", "aaabbccc"
-- test S rejects "bbcc", "abbcc", "aabbbccc"

