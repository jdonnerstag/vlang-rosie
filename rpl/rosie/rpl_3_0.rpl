---- -*- Mode: rpl; -*-
---- vim:syn=rosie
----
---- rpl_3_0.rpl   Grammar for RPL 3.x, written in RPL 1.3 syntax
----
---- Â© Copyright Juergen Donnerstag, 2022.
---- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
---- AUTHOR: Juergen Donnerstag

-- This file describes a RPL-3.0 parser in RPL-1.3 syntax, so that the current parser
-- can be used to create the v3 rplx file.
-- See rpl_3_0_example.rpl for an example RPL-3.0 file
--
-- What is different in rpl-3.0 compared to rpl-1.3:
--   No more (..) and {..}. It's all (..) now.
--   [..] ONLY for charsets. No more general disjunctions. [[:space:][a-e]] is still allowed to create a charset
--   No more implicit word_boundary, but rather explicit "~" and a macro tok:(..)
--   No more "grammar", but rather an "[recursive]" attribute
--   "[builtin]" attribute to replace build-in bindings
--   A ws byte code (not parser relevant)
--   A quote byte-code that supports "..", '..' and escapes to handle e.g. "\"" (not parser relevant)
--   Both, ".." and '..' can be used for text
--   'local' not supported anymore
--   'let' not supported anymore
--   I'm unclear whether I prefer left- or right-associativity. Or like re2 is doing it.
--   & is optional and has no special meaning any longer. It simply means 'and' or 'followed by'
--   Removed support for "import xyz as .". To avoid errors, imports must always be referenced by their name

rpl 1.3
package rpl_3_0

alias ws = [ \t\r]
alias newline = "\n"
alias rest_of_line = until:newline
alias comment = {"--" rest_of_line}
alias atmos = {ws* {{comment / newline} ws*}*}		    -- "atmosphere"
syntax_error = rest_of_line

alias id_char = [[:alnum:][_]]
alias id = {[:alpha:] id_char*}
alias id_symbol = [.$~\^]

packagename = id
alias named_identifier = {id {"." id}?} 
identifier = {id_symbol / named_identifier}

-- During parsing, we enforce two rules about string literals: ESC must be
-- followed by another character, and a double quote (inside the literal) must
-- be escaped.  Further interpretation of the literal occurs during
-- compilation.
quoted_string = quote:{[""'] "\\" ""}	-- 1st: quotes; 2st: escape, 3rd: stop

-- At parse time, the only difference between a range and a list is that a range
-- will have an unescaped dash in it.
-- Further interpretation occurs at compile time for the contents of a character
-- list, the ends of a character range, and the name of a named set.
complement = "^"
charlist = {{esc .} / {!"[" !"]" .}}*
named_charset = [A-Za-z]+
simple_charset = {"[" {":" complement? named_charset ":"} / {complement? charlist} "]" }
charset = { >"[" {simple_charset / {"[" complement? ws* {{simple_charset / named_identifier} ws*}+ "]"}}}

low =  [:digit:]*
high = [:digit:]*
alias repetition = {"{" low {"," high}? "}"}

quantifier = {[*?+] / repetition}

operator = [/&]

predicate = [!<>]+

modifier = "alias"
attributes = {>"[" {"[builtin]" / "[recursive]" / "[func]"}}

alias assignment_prefix = {{modifier ws+}? identifier {ws+ attributes}? ws* "=" ws*}

grammar
   alias simple_exp = {predicate? term quantifier?}
   term = {group / quoted_string / charset / macro / identifier}
   group = {"(" atmos simple_exp atmos {operator? atmos simple_exp atmos}* ")"}

   macro = {id ":" term macro_end}
   macro_end = ws*

-- The semicolon below MUST be there in order for this grammar to be understood by both the
-- (primitive) core rpl parser AND the rpl_1_3 parser itself.
;in
   statement = {assignment_prefix {expression / halt:syntax_error}}
   alias expression = {simple_exp {ws+ {operator ws+}? simple_exp}* ws* ";"? }
end

major = [:digit:]{1,3}
minor = [:digit:]{1,3}
alias version_spec = {major "." minor}

alias fpath = { ![;, \t\r\n\[\]] .}+
importpath = {quoted_string / fpath}
alias import_spec = {importpath {ws+ "as" ws+ packagename}? }

----------------------------------------------------------------------------------------
-- Top level patterns
----------------------------------------------------------------------------------------

language_decl = {"rpl" ws+ version_spec ws* ";"? }
package_decl = {"package" ws+ packagename ws* ";"? }
alias import_decl = {"import" ws+ import_spec {ws* "," ws* import_spec}* ws* ";"? }

alias prelude = {atmos language_decl? atmos}
--alias header = {{package_decl atmos}? {import_decl atmos}*}
alias header = {atmos {halt:language_decl atmos}? {package_decl atmos}? {import_decl atmos}* }
alias body = {statement atmos}*

-- File content
rpl_module = {header body $} / halt:syntax_error

-- Command line
rpl_expression = {header body expression? atmos $} / halt:syntax_error

---------------------------------------------------------------------------------------------------
-- Tests
---------------------------------------------------------------------------------------------------

-- test rest_of_line accepts "", " ", "whatever"
-- test rest_of_line assert " aaa \n bbb" == " aaa \n"
-- test comment accepts "--", "-- ", "-- whatever\n"
-- test atmos accepts "", "--", " \n ", " -- \n"

-- test id accepts "a", "ab", "a1", "a_1"
-- test id rejects "_a"

-- test language_decl rejects "rpl", "rpl ", "rpl a", "rpl 1.a", "rpl 1.", "rpl 1.1234", "rpl 1.\n1"
-- test language_decl accepts "rpl 0.0", "rpl 1.0", "rpl 52.99", "rpl 1.1"

-- test package_decl accepts "package foo", "package fooBar", "package f_oo"
-- test package_decl rejects "package", "package _foo", "package 6foo", "package .foo", "package foo.bar"
-- test package_decl rejects "package \n foo"

-- test import_decl rejects "import"

-- importpath can be QUOTED STRING:
-- test import_decl rejects "import \"foo/bar\","
-- test import_decl accepts "import \"foo/bar\""
-- test import_decl accepts "import \"foo/bar\", \"/usr/local/baz\", \"/usr/bin/time\""
-- test import_decl accepts "import \"foo/bar\" as foo"
-- test import_decl accepts "import \"foo/bar\" as foo, \"/usr/local/baz\", \"/usr/bin/time\""
-- test import_decl accepts "import \"foo/bar\" as foo, \"/usr/local/baz\" as baz, \"/usr/bin/time\""

-- importpath can be PLAIN SYMBOL, uninterpreted:
--    (But a path must be relative, and a symbol starts with [:alpha:])
-- test import_decl rejects "import foo,"
-- test import_decl rejects "import foo["
-- test import_decl accepts "import foo/bar/baz"
-- test import_decl accepts "import foo/bar", usr/lo-cal/b_az, \"/usr/bin/time\""
-- test import_decl accepts "import foo/bar as foo"
-- test import_decl accepts "import foo/bar as foo, \"/usr/local/baz\", bin/time"
-- test import_decl accepts "import f_o_o as foo, local/baz as baz, bin/time"
-- test import_decl accepts "import f_o_o/bar as foo, \"/usr/local/baz\" as baz, \"/usr/bin/time\""

-- Macros
-- TODO Review and rework the tests
-- # test rpl_expression accepts "foo:x", "foo_1:x", "pkg.f:x", "f:\"hello\"", "f:!x", "f:x+", "f:(x y z)", "f:(!x)", "f:(x y z)"
-- Jdo: removed support for 'functions'
-- # test rpl_expression accepts "f:(x, y)", "foo:{a, b}"
-- # test rpl_expression accepts "f:(a, 55)", "foo.bar:(1, 2, 3, a b c, d / e, {f}*)", "f:{a / b, 3}+"
-- # test rpl_expression rejects "f:", "pkg.f:"
-- # test rpl_expression includes form.arglist "f:(x, y)", "f:(3)"
-- # test rpl_expression excludes form.arglist "f:(x y)"
-- # test rpl_expression includes form.arg "f:(x)", f:(x y)", "f:x", "f:5", "f:{x y}", "f:{x}",
-- # test rpl_expression includes form.arg "f:{a / b}+", "f:{(a)}", "f:{[:set:]}"
-- # test rpl_expression includes form.rawarglist "f:{5}", "f:{7, x, a / b / c+}", "f:{(a),b}", "f:{[:set:]{1,2},\"hi\"}"
